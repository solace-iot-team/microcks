# Configuration file.
quarkus.http.port=8081

# Configure the log level.
quarkus.log.level=INFO
quarkus.log.console.level=INFO

# Configure kafka integration into health probe.
quarkus.kafka.health.enabled=true

# Access to Microcks API server.
io.github.microcks.minion.async.client.MicrocksAPIConnector/mp-rest/url=http://localhost:8080
microcks.serviceaccount=microcks-serviceaccount
microcks.serviceaccount.credentials=ab54d329-e435-41ae-a900-ec6b3fe15c54

# Access to Keycloak URL if you override the one coming from Microcks config
#keycloak.auth.url=http://localhost:8180/auth

# Access to Kafka broker.
kafka.bootstrap.servers=localhost:9092
# For Apicurio registry
#kafka.schema.registry.url=http://localhost:8889/api
#kafka.schema.registry.confluent=false
# For Confluent registry
#kafka.schema.registry.url=http://localhost:8889
kafka.schema.registry.confluent=true
kafka.schema.registry.username=
kafka.schema.registry.credentials.source=USER_INFO

mp.messaging.incoming.microcks-services-updates.connector=smallrye-kafka
mp.messaging.incoming.microcks-services-updates.topic=microcks-services-updates
mp.messaging.incoming.microcks-services-updates.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.microcks-services-updates.value.deserializer=io.github.microcks.minion.async.client.ServiceViewChangeEventDeserializer
# Do not save any consumer-offset on the broker as there's a re-sync on each minion startup.
mp.messaging.incoming.microcks-services-updates.enable.auto.commit=false
mp.messaging.incoming.microcks-services-updates.bootstrap.servers=localhost:9092

# Access to MQTT broker.
mqtt.server=localhost:1883
#you can override the client id used by the minion in order to avoid client id clashes on the MQTT broker
#mqtt.clientid=microcks-async-minion
mqtt.username=microcks
mqtt.password=microcks

# Configure the minion own behavioral properties.
minion.supported-bindings=KAFKA
minion.restricted-frequencies=3,10,30
minion.default-avro-encoding=RAW
# configure the name space that the minion publishes to, either 'prefixed' (with service name and version) or 'bare' (just the channel as described in the spec)
# minion.namespace.style=prefixed